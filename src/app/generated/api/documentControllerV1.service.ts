/**
 * document-management
 * 1000kit document management
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

// Core imports
import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
} from '@angular/common/http';

// Third party imports
import { Observable } from 'rxjs';

// Application imports
import { Configuration } from '../configuration';
import { CustomHttpParameterCodec } from '../encoder';
import {
  ChannelDTO,
  DocumentCreateUpdateDTO,
  DocumentDetailDTO,
  LifeCycleState,
  PageResultDTO,
} from '../model/models';
import { BASE_PATH } from '../variables';

export interface CreateDocumentRequestParams {
  documentCreateUpdateDTO?: DocumentCreateUpdateDTO;
}

export interface DeleteDocumentByIdRequestParams {
  id: string;
}

export interface DeleteFileRequestParams {
  deletedAttachmentsIds: string[];
}

export interface GetDocumentByCriteriaRequestParams {
  channelName?: string;
  id?: string;
  name?: string;
  page?: number;
  size?: number;
  state?: Array<LifeCycleState>;
  typeId?: Array<string>;
  startDate?: string;
  endDate?: string;
  createdBy?: string;
  objectReferenceId?: string;
  objectReferenceType?: string;
}

export interface GetDocumentByIdRequestParams {
  id: string;
}

export interface GetFileRequestParams {
  attachmentId: string;
}

export interface UpdateDocumentRequestParams {
  id: string;
  documentCreateUpdateDTO?: DocumentCreateUpdateDTO;
}

export interface BulkUpdateDocumentRequestParams {
  bulkDocumentCreateUpdateDTO?: DocumentCreateUpdateDTO[];
}
export interface UploadFileRequestParams {
  attachmentId: string;
}

@Injectable({
  providedIn: 'any',
})
export class DocumentControllerV1APIService {
  protected basePath = 'http://localhost';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string
  ): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursiveObject(value, httpParams, key) {
    if (Array.isArray(value)) {
      value.forEach(
        (elem) =>
          (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
      );
    } else if (value instanceof Date) {
      if (key != null) {
        httpParams = httpParams.append(key, value.toISOString().slice(0, 10));
      } else {
        throw Error('key may not be null if value is Date');
      }
    } else {
      Object.keys(value).forEach(
        (k) =>
          (httpParams = this.addToHttpParamsRecursive(
            httpParams,
            value[k],
            key != null ? `${key}.${k}` : k
          ))
      );
    }
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      this.addToHttpParamsRecursiveObject(value, httpParams, key);
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * Create Document
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createDocument(
    requestParameters: CreateDocumentRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any>;
  public createDocument(
    requestParameters: CreateDocumentRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<DocumentDetailDTO>>;
  public createDocument(
    requestParameters: CreateDocumentRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<DocumentDetailDTO>>;
  public createDocument(
    requestParameters: CreateDocumentRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    const documentCreateUpdateDTO = requestParameters.documentCreateUpdateDTO;

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected?.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.post<DocumentDetailDTO>(
      `${this.configuration.basePath}/v1/document`,
      documentCreateUpdateDTO,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete Document by Id
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteDocumentById(
    requestParameters: DeleteDocumentByIdRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any>;
  public deleteDocumentById(
    requestParameters: DeleteDocumentByIdRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<any>>;
  public deleteDocumentById(
    requestParameters: DeleteDocumentByIdRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<any>>;
  public deleteDocumentById(
    requestParameters: DeleteDocumentByIdRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    const id = requestParameters.id;
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling deleteDocumentById.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected?.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.delete<any>(
      `${this.configuration.basePath}/v1/document/${encodeURIComponent(
        String(id)
      )}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete attachment\&#39;s file
   * @param body accepts an array of Strings which contains the attachmentIds that is required to be deleted
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteFile(
    requestParameters: DeleteFileRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any>;
  public deleteFile(
    requestParameters: DeleteFileRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<any>>;
  public deleteFile(
    requestParameters: DeleteFileRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<any>>;
  public deleteFile(
    requestParameters: DeleteFileRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    const attachmentIdsLength = requestParameters.deletedAttachmentsIds.length;
    if (attachmentIdsLength === 0) {
      throw new Error(
        'Required parameter attachmentId(s) was null when calling deleteFile.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected?.startsWith('text')) {
      responseType = 'text';
    }

    const newHeader = new HttpHeaders().set(
      'Content-Type',
      'application/json; charset=utf-8'
    );

    return this.httpClient.delete(
      `${this.configuration.basePath}/v1/document/file/delete-bulk-attachment`,
      {
        body: JSON.stringify(requestParameters.deletedAttachmentsIds),
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: newHeader,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Gets all channels
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllChannels(
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<Array<ChannelDTO>>;
  public getAllChannels(
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<Array<ChannelDTO>>>;
  public getAllChannels(
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<Array<ChannelDTO>>>;
  public getAllChannels(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected?.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.get<Array<ChannelDTO>>(
      `${this.configuration.basePath}/v1/document/channels`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Iterate & return query params
   */
  public checkAllprops(props) {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    for (let prop of props) {
      const key = Object.keys(prop)[0];
      const val = prop[key];
      if (key == 'typeId' || key == 'state') {
        if (val !== undefined && val !== null) {
          val.forEach((element) => {
            queryParameters = this.addToHttpParams(
              queryParameters,
              element,
              key
            );
          });
        }
      } else if (val !== undefined && val !== null) {
        queryParameters = this.addToHttpParams(queryParameters, val, key);
      }
      console.log(key.toString());
    }
    return queryParameters;
  }

  /**
   * Populate Query Params
   */
  public populateQueryParameters(requestParameters) {
    const props = [
      { channelName: requestParameters.channelName },
      { id: requestParameters.id },
      { name: requestParameters.name },
      { page: requestParameters.page },
      { size: requestParameters.size },
      { state: requestParameters.state },
      { typeId: requestParameters.typeId },
      { startDate: requestParameters.startDate },
      { endDate: requestParameters.endDate },
      { createdBy: requestParameters.createdBy },
      { objectReferenceId: requestParameters.objectReferenceId },
      { objectReferenceType: requestParameters.objectReferenceType },
    ];
    return this.checkAllprops(props);
  }

  /**
   * Gets documents by criteria
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDocumentByCriteria(
    requestParameters: GetDocumentByCriteriaRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<PageResultDTO>;
  public getDocumentByCriteria(
    requestParameters: GetDocumentByCriteriaRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<PageResultDTO>>;
  public getDocumentByCriteria(
    requestParameters: GetDocumentByCriteriaRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<PageResultDTO>>;
  public getDocumentByCriteria(
    requestParameters: GetDocumentByCriteriaRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    let queryParameters = this.populateQueryParameters(requestParameters);

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected?.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.get<PageResultDTO>(
      `${this.configuration.basePath}/v1/document`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Gets Document by Id
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDocumentById(
    requestParameters: GetDocumentByIdRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<DocumentDetailDTO>;
  public getDocumentById(
    requestParameters: GetDocumentByIdRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<DocumentDetailDTO>>;
  public getDocumentById(
    requestParameters: GetDocumentByIdRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<DocumentDetailDTO>>;
  public getDocumentById(
    requestParameters: GetDocumentByIdRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    const id = requestParameters.id;
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getDocumentById.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected?.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.get<DocumentDetailDTO>(
      `${this.configuration.basePath}/v1/document/${encodeURIComponent(
        String(id)
      )}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get attachment\&#39;s file
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFile(
    requestParameters: GetFileRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/octet-stream';
    }
  ): Observable<object>;
  public getFile(
    requestParameters: GetFileRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/octet-stream';
    }
  ): Observable<HttpResponse<object>>;
  public getFile(
    requestParameters: GetFileRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/octet-stream';
    }
  ): Observable<HttpEvent<object>>;
  public getFile(
    requestParameters: GetFileRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/octet-stream';
    }
  ): Observable<any> {
    const attachmentId = requestParameters.attachmentId;
    if (attachmentId === null || attachmentId === undefined) {
      throw new Error(
        'Required parameter attachmentId was null or undefined when calling getFile.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'application/json',
        'application/octet-stream',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected?.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.get<object>(
      `${this.configuration.basePath}/v1/document/file/${encodeURIComponent(
        String(attachmentId)
      )}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Update an document
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateDocument(
    requestParameters: UpdateDocumentRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<DocumentDetailDTO>;
  public updateDocument(
    requestParameters: UpdateDocumentRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<DocumentDetailDTO>>;
  public updateDocument(
    requestParameters: UpdateDocumentRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<DocumentDetailDTO>>;
  public updateDocument(
    requestParameters: UpdateDocumentRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    const id = requestParameters.id;
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling updateDocument.'
      );
    }
    const documentCreateUpdateDTO = requestParameters.documentCreateUpdateDTO;

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected?.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.put<DocumentDetailDTO>(
      `${this.configuration.basePath}/v1/document/${encodeURIComponent(
        String(id)
      )}`,
      documentCreateUpdateDTO,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete Bulk Document by Ids
   * @param documentIds
   */

  public deleteBulkDocumentByIds(documentIds): Observable<any> {
    const headers = new HttpHeaders().set(
      'Content-Type',
      'application/json; charset=utf-8'
    );
    const options = {
      headers: headers,
      body: JSON.stringify(documentIds),
    };

    return this.httpClient.delete(
      `${this.configuration.basePath}/v1/document/delete-bulk-documents`,
      options
    );
  }

  /**
   * Update an bulk document
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public bulkUpdateDocument(
    requestParameters: BulkUpdateDocumentRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<DocumentDetailDTO>;
  public bulkUpdateDocument(
    requestParameters: BulkUpdateDocumentRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<DocumentDetailDTO>>;
  public bulkUpdateDocument(
    requestParameters: BulkUpdateDocumentRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<DocumentDetailDTO>>;
  public bulkUpdateDocument(
    requestParameters: BulkUpdateDocumentRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    const id = requestParameters;
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling bulkUpdateDocument.'
      );
    }
    const bulkDocumentCreateUpdateDTO =
      requestParameters.bulkDocumentCreateUpdateDTO;

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected?.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.put<DocumentDetailDTO[]>(
      `${this.configuration.basePath}/v1/document/bulkupdate`,
      bulkDocumentCreateUpdateDTO,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
